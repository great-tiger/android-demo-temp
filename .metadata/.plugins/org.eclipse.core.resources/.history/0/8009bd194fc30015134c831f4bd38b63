package com.example.android_videoview_service;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.renderscript.Sampler.Value;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.widget.Toast;

public class PlayService extends Service {
	private NotificationManager manager;
	private NotificationCompat.Builder builder;
	Handler handler=new Handler(){
		@Override
		public void handleMessage(android.os.Message msg) {
			builder.setProgress(100, msg.arg1, false);
			manager.notify(1001,builder.build());
			if(msg.what==1){
				Intent intent=new Intent(PlayService.this,PlayActivity.class);
				PendingIntent pendingIntent=PendingIntent.getActivity(getApplicationContext(), 1, intent, PendingIntent.FLAG_ONE_SHOT);
				builder.setContentIntent(pendingIntent);		
				stopSelf();//关闭service
			}
		};
	};
	class DownLoadService implements Runnable{
		private String path;
		
		public DownLoadService(String path){
			this.path=path;
		}
		public void run() {
			Log.i("---->","run");
			HttpClient httpClient=new DefaultHttpClient();
			HttpPost httpPost=new HttpPost(path);
			InputStream inputStream=null;
			ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
			try{
				HttpResponse httpResponse=httpClient.execute(httpPost);
				if(httpResponse.getStatusLine().getStatusCode()==200){
					inputStream=httpResponse.getEntity().getContent();
					long file_length=httpResponse.getEntity().getContentLength();
					int len=0;
					int total_length=0;
					byte[] data=new byte[20480];
					while ((len=inputStream.read(data))!=-1) {
						total_length+=len;
						int value=(int)((total_length/(float)file_length)*100);
						outputStream.write(data,0,len);
						Message message=Message.obtain();
						message.arg1=value;
						handler.sendMessage(message);
					}
					Log.i("---->",value);
					if(SDCardTools.saveFile("abc.MP4",outputStream.toByteArray())){
						Message message=Message.obtain();
						message.what=1;
						handler.sendMessage(message);
					}
				}
			}catch(Exception e){
				
				
			}finally {
				if(inputStream!=null){
					try{
						inputStream.close();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
				httpClient.getConnectionManager().shutdown();
			}
			
			
		}
	}
	
	@Override
	public void onCreate() {
		super.onCreate();
		manager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
		builder=new NotificationCompat.Builder(getApplicationContext());
		builder.setContentTitle("下载文件");
		builder.setContentText("下载视频");
		builder.setSmallIcon(R.drawable.ic_launcher);
		manager.notify(1001,builder.build());
		
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		new Thread(new DownLoadService(intent.getStringExtra("url")));
		return super.onStartCommand(intent, flags, startId);
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

}
